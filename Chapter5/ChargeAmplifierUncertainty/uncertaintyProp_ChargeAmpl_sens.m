function [EvalResult, Info] = uncertaintyProp_ChargeAmpl_sens(p,ParamValues)
%SENSITIVITYEVALUATION_CHARGEAMPL_SENS
%
% Solve a design exploration problem for the ChargeAmpl_sens model.
%
% The function returns model results, EvalResult,
% and model evaluation information, Info.
%
% The input argument, p, defines the model parameters to vary,
% if omitted the parameters specified in the function body are varied.
%
% Modify the function to include or exclude new design requirements, or
% to change the evaluation options.
%
% Auto-generated by SSATOOL on 21-May-2021 10:19:34.
%

%% Open the model.
open_system('ChargeAmpl_sens')

%% Specify Model Parameters to Vary
%


%% Simulation Definition
%
% Specify model signals to log during model simulation.
Simulator = sdo.SimulationTest('ChargeAmpl_sens');

Sig_Info = Simulink.SimulationData.SignalLoggingInfo;
Sig_Info.BlockPath = 'ChargeAmpl_sens/From7';
Sig_Info.LoggingInfo.LoggingName = 'Sig';
Sig_Info.LoggingInfo.NameMode = 1;

Simulator.LoggingInfo.Signals = Sig_Info;

%% Create Evaluation Objective Function
%
% Create a function that is called for each combination of parameters
% being varied, to compute the cost.
%
% Use an anonymous function with one argument that calls ChargeAmpl_sens_evalFcn.
evalfcn = @(P) ChargeAmpl_sens_evalFcn(P,Simulator);

%% Evaluation Options
%
% Specify evaluation options.
Options = sdo.EvaluateOptions;
Options.EvaluatedModel = Simulator;

%% Evaluate the Model
%
% Call sdo.evaluate with the objective function handle, parameters to
% vary, parameter values, and options.
[EvalResult,Info] = sdo.evaluate(evalfcn,p,ParamValues,Options);
end

function Vals = ChargeAmpl_sens_evalFcn(P,Simulator)
%CHARGEAMPL_SENS_EVALFCN
%
% Function called at each iteration of the evaluation problem.
%
% The function is called with a set of parameter values, P, and returns
% the evaluated cost, Vals.
%
% See the sdoExampleCostFunction function and sdo.evaluate for a more
% detailed description of the function signature.
%

%% Model Evaluation

% Simulate the model.
Simulator.Parameters = P;
Simulator = sim(Simulator);

% Retrieve logged signal data.
SimLog = find(Simulator.LoggedData,get_param('ChargeAmpl_sens','SignalLoggingName'));
Sig_Log = find(SimLog,'Sig');

% Evaluate the design requirements.
%Vals.SignalProperty = evalRequirement(Requirements.SignalProperty,Sig_Log.Values);

% Compress requirement outputs by taking maximum value.
Vals.SignalProperty = max(Sig_Log.Values.Data(10000:end))-min(Sig_Log.Values.Data(10000:end));%max(Vals.SignalProperty(:));
end
