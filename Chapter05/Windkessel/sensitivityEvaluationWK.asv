function [EvalResult, ParamValues, p] = sensitivityEvaluationWK(out)
%SENSITIVITYEVALUATIONWK
%
% Solve a design exploration problem for the WK model.
%
% The function returns model results, EvalResult,
% and model evaluation information, Info.
%
% The input argument, p, defines the model parameters to vary,
% if omitted the parameters specified in the function body are varied.
%
% Modify the function to include or exclude new design requirements, or
% to change the evaluation options.
%
% Auto-generated by SSATOOL on 25-Jun-2021 10:58:37.
%

%% Open the model.
open_system('WK')

%% Specify Model Parameters to Vary
%

    p = sdo.getParameterFromModel('WK',{'R0', 'Ca','R','L'});
    p(1).Minimum = 0.01;
    p(1).Maximum = 0.1;
    p(2).Value = 2;
    p(2).Minimum = 0.5;
    p(2).Maximum = 3;
    p(3).Value = 0.6;
    p(3).Minimum = 0.1;
    p(3).Maximum = 2;
    p(4).Value = 0.005;
    p(4).Minimum = 0.001;
    p(4).Maximum = 0.05;
ps= sdo.ParameterSpace(p)
ParamValues = sdo.sample(ps, 100); %getData('ParamSet');

%% Simulation Definition
%
% Specify model signals to log during model simulation.
Simulator = sdo.SimulationTest('WK');

Sig_Info = Simulink.SimulationData.SignalLoggingInfo;
Sig_Info.BlockPath = 'WK/From2';
Sig_Info.LoggingInfo.LoggingName = 'Sig';
Sig_Info.LoggingInfo.NameMode = 1;

Simulator.LoggingInfo.Signals = Sig_Info;

%% Create Evaluation Objective Function
%
% Create a function that is called for each combination of parameters
% being varied, to compute the cost.
%
% Use an anonymous function with one argument that calls WK_evalFcn.
evalfcn = @(P) WK_evalFcn(P,Simulator,out);

%% Evaluation Options
%
% Specify evaluation options.
Options = sdo.EvaluateOptions;
Options.EvaluatedModel = Simulator;

%% Evaluate the Model
%
% Call sdo.evaluate with the objective function handle, parameters to
% vary, parameter values, and options.
[EvalResult,Info] = sdo.evaluate(evalfcn,p,ParamValues,Options);
end

function Vals = WK_evalFcn(P,Simulator,out)
%WK_EVALFCN
%
% Function called at each iteration of the evaluation problem.
%
% The function is called with a set of parameter values, P, and returns
% the evaluated cost, Vals.
%
% See the sdoExampleCostFunction function and sdo.evaluate for a more
% detailed description of the function signature.
%

%% Model Evaluation
start_pulse_ind=15800;
end_pulse_ind=16841;

% Simulate the model.
Simulator.Parameters = P;
Simulator = sim(Simulator);

% Retrieve logged signal data.
SimLog = find(Simulator.LoggedData,get_param('WK','SignalLoggingName'));
Sig_Log = find(SimLog,'Sig');

% Evaluate the design requirements.
Vals.CustomReq = mean((Sig_Log.Values.Data(start_pulse_ind:end_pulse_ind)-out(start_pulse_ind:end_pulse_ind,2)).^2);
end
